{"version":3,"sources":["App.js","serviceWorker.js","components/table.js","index.js"],"names":["SubMenu","Menu","sub_style","color","backgroundColor","App","handleClick","e","console","log","react_default","a","createElement","className","style","width","height","float","position","left","top","overflowX","menu","onClick","this","paddingTop","defaultSelectedKeys","defaultOpenKeys","mode","key","title","icon","type","Item","es","to","padding","marginLeft","props","children","Component","Boolean","window","location","hostname","match","columns","dataIndex","data","i","push","name","concat","age","address","Tables","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onSelectChange","selectedRowKeys","setState","state","_this2","rowSelection","onChange","hideDefaultSelections","selections","text","onSelect","toConsumableArray","Array","keys","changableRowKeys","newSelectedRowKeys","filter","index","onSelection","table","dataSource","ReactDOM","render","history","hashHistory","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f289c1cc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router';\n// import logo from './logo.svg';\nimport { Menu, Icon } from 'antd';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\n\nconst SubMenu = Menu.SubMenu;\n// const MenuItemGroup = Menu.ItemGroup;\n\nconst sub_style={\n  color:'#e5e5e5',\n  backgroundColor:\"#323332\"\n}\n\nclass App extends Component {\n\n  handleClick = (e) => {\n    console.log('click ', e);\n  }\n\n  render() {\n    return (\n      <div className=\"App\" style={{width:'100%',height:'100%'}}>\n        <div className=\"left_Menu\" style={{height:\"100%\",width:\"16%\",float:\"left\",backgroundColor:\"#323332\",position:\"fixed\",left:0,top:0,overflowX:\"hidden\"}}>\n        <Menu\n        onClick={this.handleClick}\n        style={{ width:\"100%\",height:\"100%\",backgroundColor:\"#323332\",color:\"#e5e5e5\",paddingTop:\"20px\"}}\n        defaultSelectedKeys={['1']}\n        defaultOpenKeys={['sub1']}\n        mode=\"inline\"\n      >\n        <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span> 导航一</span></span>} style={sub_style}>\n          {/* <MenuItemGroup key=\"g1\" title=\"Item 1\"> */}\n            <Menu.Item key=\"1\" style={sub_style}><Link to=\"/table\" style={{color:\"#e5e5e5\"}}>表格</Link></Menu.Item>\n            <Menu.Item key=\"2\" style={sub_style}>Option 2</Menu.Item>\n          {/* </MenuItemGroup> */}\n        </SubMenu>\n        <SubMenu key=\"sub2\" title={<span><Icon type=\"appstore\" /><span>导航二</span></span>} style={{backgroundColor:\"#323332\"}}>\n          <Menu.Item key=\"5\" style={{backgroundColor:\"#323332\"}}>Option 5</Menu.Item>\n          <Menu.Item key=\"6\" style={{backgroundColor:\"#323332\"}}>Option 6</Menu.Item>\n        </SubMenu>\n        <SubMenu key=\"sub4\" title={<span><Icon type=\"setting\" /><span>导航三</span></span>}>\n          <Menu.Item key=\"9\">Option 9</Menu.Item>\n          <Menu.Item key=\"10\">Option 10</Menu.Item>\n        </SubMenu>\n      </Menu>\n        </div>\n        <div className=\"right_content\" style={{width:\"84%\",padding:\"23px\",marginLeft:\"16%\"}}> \n            <p style={{}}><i>刘贝</i></p>\n            <hr/>\n            <div>\n              {this.props.children}\n            </div>\n        </div>\n          \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nimport {Table} from 'antd';\n\n\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n}, {\n  title: 'Age',\n  dataIndex: 'age',\n}, {\n  title: 'Address',\n  dataIndex: 'address',\n}];\n\nconst data = [];\nfor (let i = 0; i < 46; i++) {\n  data.push({\n    key: i,\n    name: `Edward King ${i}`,\n    age: 32,\n    address: `London, Park Lane no. ${i}`,\n  });\n}\n\nclass Tables extends Component {\n     constructor(props){\n        super(props);\n        this.state={         \n         selectedRowKeys: [], // Check here to configure the default column\n  \n        }\n    }\n\n    onSelectChange = (selectedRowKeys) => {\n    console.log('selectedRowKeys changed: ', selectedRowKeys);\n    this.setState({ selectedRowKeys });\n  }\n    render() {\n        const { selectedRowKeys } = this.state;\n    const rowSelection = {\n      selectedRowKeys,\n      onChange: this.onSelectChange,\n      hideDefaultSelections: true,\n      selections: [{\n        key: 'all-data',\n        text: 'Select All Data',\n        onSelect: () => {\n          this.setState({\n            selectedRowKeys: [...Array(46).keys()], // 0...45\n          });\n        },\n      }, {\n        key: 'odd',\n        text: 'Select Odd Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return false;\n            }\n            return true;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }, {\n        key: 'even',\n        text: 'Select Even Row',\n        onSelect: (changableRowKeys) => {\n          let newSelectedRowKeys = [];\n          newSelectedRowKeys = changableRowKeys.filter((key, index) => {\n            if (index % 2 !== 0) {\n              return true;\n            }\n            return false;\n          });\n          this.setState({ selectedRowKeys: newSelectedRowKeys });\n        },\n      }],\n      onSelection: this.onSelection,\n    };\n\n        return (\n            <div>\n                \n                <Table rowSelection={rowSelection} columns={columns} dataSource={data}/>\n            </div>\n        );\n    }\n}\n\nexport default Tables;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Router,Route,hashHistory,IndexRoute} from 'react-router';\n\nimport Tables from './components/table';\n\nReactDOM.render(<Router history={hashHistory}>\n    <Route path=\"/\" component={App}>\n    <IndexRoute component={Tables}/>\n    <Route path=\"/table\" component={Tables}></Route>\n\n    </Route>\n\n\n</Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}